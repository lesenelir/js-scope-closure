/**
 *    闭包作用：
 *      1. 使用函数内部的变量在函数执行完后，仍然存活于内存中（延长了局部变量的生命周期）
 *      2. 让函数外部可以操作（读写）到函数内部的数据（变量/函数）
 *
 *    问题：
 *      1. 函数执行完后，函数内部声明的局部变量是否还存在？ 一般不存在，存在闭包情况才可能存在
 *      2. 在函数外部能直接访问函数内部的局部变量吗？ 不能，但是通过闭包技术可以让外部操作内部的局部变量
 *
 */

function fn1() {
  var a = 2
  function fn2() {
    a++
    console.log(a)
  }
  function fn3() {
    a--
    console.log(a)
  }
  return fn3 // 返回fn3的地址值
}

var f = fn1() // 变量没消失的根本原因：f指向了函数对象，函数对象关联了闭包
// fn3这个函数的地址赋值给了f，调用f就是调用fn3
f()
f()

