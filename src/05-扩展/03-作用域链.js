// 在访问变量或者函数时, 会在作用域链上依次查找,
// 最直观的表现是: 内部函数可以使用外部函数声明的变量

// 内部函数可以使用外部函数的变量，外部函数不能使用内部函数的变量

// 理解：
// 1. 内部函数的变量在内部函数的大括号中，所以块级作用域外部函数不能使用内部块级作用域

// 2. 当外部函数声明的时候，内部函数还没有被调用，此时内部函数没有生成AO对象

// 查找原则：就近查找原则  ，先找自己的AO，再一层层根据[[scopes]]往上查找，直至GO

function a() {
  var aa = 111
  function b() {
    console.log(aa)
  }
  b()
}

a()


// 1. 产生aAO对象
// aAO: {aa: undefined, b: fun} // 预编译
// 执行第5行 aAO: {aa: 111, b: fun}
// 执行15行产生bAO对象
// bAO: {}
// [[scopes]]:
//     0: bAO
//     1: aAO
//     2: GO





