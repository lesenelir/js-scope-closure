/**
 *    闭包的形成：
 *      1. 内部函数使用了外部函数的变量，就会形成闭包，闭包保留了外部环境的引用
 *      2. 内部函数如果被返回到了外部函数的外面，在外部函数执行完后，依旧可以使用闭包里的值【闭包保持】
 *
 */

function a() {
  var aa = 100
  function b() {
    console.log(b)  // 形成了闭包（内部AO对象使用外部AO对象的属性），在aAO对象中查找到b属性
    // （此时闭包调用完后就会被销毁，因为没有返回到外部函数的外面）
  }
  b()
}

a()

// 1. 产生GO对象
// 2. 产生aAO对象
//      aAO: {aa: 100, b: function}
// 3. 产生bAO对象 bAO={}
//     函数b的scopes:
//                  0 - bAO
//                  1 - aAO
//                  2 - GO



// Note: 闭包也是一个对象，内部函数b使用了外部函数a中的变量，这个变量会作为闭包对象的属性

